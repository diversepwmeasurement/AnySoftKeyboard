env:
  GRADLE_HOME: .github_cache_gradle/gradle_home/
  GRADLE_OPTS: -Dorg.gradle.daemon=false
  GRADLE_USER_HOME: .github_cache_gradle/user_home/
  TERM: dumb
  TMPDIR: /tmp
jobs:
  all-green-requirement:
    needs:
    - static-checks
    - linters
    - tests
    - deploy-dry-run
    - js-checks
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: ready
      run: echo "DONE"
  deploy-dry-run:
    container: ghcr.io/menny/android_ndk:1.20.0
    env:
      KEY_STORE_FILE_DEFAULT_ALIAS_PASSWORD: alias_password
      KEY_STORE_FILE_PASSWORD: password
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 2
    - continue-on-error: true
      uses: actions/cache@v4.0.2
      with:
        key: deploy-v9-${{ matrix.shard_type }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties')
          }}-${{ hashFiles('**/*.gradle') }}
        path: .github_cache_gradle/
        restore-keys: 'deploy-v9-${{ matrix.shard_type }}

          global-v9

          '
    - continue-on-error: true
      name: setup
      run: ./scripts/ci/ci_setup.sh
    - continue-on-error: true
      name: generate projects list for sharding
      run: ./gradlew projects | grep Project > /tmp/projects.lst
    - continue-on-error: true
      if: ${{ matrix.supports_logo }}
      name: addons-logos
      run: 'python3 scripts/modules_sharder.py /tmp/projects.lst "$PWD" ${{ matrix.shard_type
        }} generateStoreLogoIcon /tmp/gradle.tasks_logo.lst

        ./gradlew $(cat /tmp/gradle.tasks_logo.lst)

        '
    - continue-on-error: true
      name: setup-keystore
      run: 'mkdir -p /root/.android/ || true

        cp ./.github/actions/deploy/debug.keystore /root/.android/

        cp .github/actions/deploy/release_test.keystore /tmp/anysoftkeyboard.keystore

        '
    - continue-on-error: true
      name: shard
      run: 'python3 scripts/modules_sharder.py /tmp/projects.lst "$PWD" ${{ matrix.shard_type
        }} assembleRelease /tmp/gradle.tasks_assemble.lst

        python3 scripts/modules_sharder.py /tmp/projects.lst "$PWD" ${{ matrix.shard_type
        }} bundleRelease,signDebugBundle /tmp/gradle.tasks_bundle.lst

        python3 scripts/modules_sharder.py /tmp/projects.lst "$PWD" ${{ matrix.shard_type
        }} generateReleasePlayResources /tmp/gradle.tasks_play.lst

        '
    - continue-on-error: true
      name: dry-run-release-build
      run: "./gradlew -PwithAutoVersioning -DdeployChannel=production -PonlyPublishSupporting=production\
        \ \\\n    $(cat /tmp/gradle.tasks_assemble.lst)\n\n./gradlew -PwithAutoVersioning\
        \ -DdeployChannel=production -PonlyPublishSupporting=production \\\n    $(cat\
        \ /tmp/gradle.tasks_bundle.lst)\n\n./gradlew -PwithAutoVersioning -DdeployChannel=production\
        \ -PonlyPublishSupporting=production \\\n    $(cat /tmp/gradle.tasks_play.lst)\n"
    - continue-on-error: true
      if: ${{ matrix.supports_canary }}
      name: dry-run-canary-build
      run: "python3 scripts/modules_sharder.py /tmp/projects.lst \"$PWD\" ${{ matrix.shard_type\
        \ }} assembleCanary,bundleCanary,generateCanaryPlayResources /tmp/gradle.tasks_canary.lst\n\
        \n./gradlew -PwithAutoVersioning -DdeployChannel=canart -PonlyPublishSupporting=canary\
        \ \\\n    $(cat /tmp/gradle.tasks_canary.lst)\n"
    - continue-on-error: true
      if: always()
      name: fix-fs
      run: ./scripts/ci/ci_fix_fs.sh
    - continue-on-error: true
      uses: actions/upload-artifact@v4.3.2
      with:
        name: fdroid-metadata-dry-run-${{ matrix.shard_type }}
        path: outputs/fdroid
    strategy:
      matrix:
        include:
        - supports_canary: false
          supports_logo: true
        - shard_type: app
          supports_canary: true
          supports_logo: false
        shard_type:
        - binaries_0
        - binaries_1
        - binaries_2
        - app
    timeout-minutes: 30
  deploy-request:
    container: ghcr.io/menny/android_base:1.20.0
    if: github.event_name == 'push'
    needs:
    - all-green-requirement
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 2
    - continue-on-error: true
      name: request-new-deploys
      uses: ./.github/actions/deploy-request
      with:
        api_token: ${{ secrets.BOT_MASTER_RW_GITHUB_TOKEN }}
        api_username: ${{ secrets.BOT_MASTER_RW_GITHUB_USERNAME }}
        new_deploy: true
        ref: ${{ github.ref }}
        sha: ${{ github.sha }}
  js-checks:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 2
    - continue-on-error: true
      uses: pnpm/action-setup@v3.0.0
      with:
        run_install: true
        version: 8.6.9
    - continue-on-error: true
      uses: actions/setup-node@v4.0.2
      with:
        cache: pnpm
        node-version-file: .nvmrc
    - continue-on-error: true
      run: pnpm lint
    - continue-on-error: true
      run: pnpm pretty
    - continue-on-error: true
      run: pnpm build
    - continue-on-error: true
      run: pnpm test
  linters:
    container: ghcr.io/menny/android_ndk:1.20.0
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 2
    - continue-on-error: true
      uses: actions/cache@v4.0.2
      with:
        key: global-v9-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{
          hashFiles('**/*.gradle') }}
        path: .github_cache_gradle/
        restore-keys: 'global-v9

          '
    - continue-on-error: true
      name: setup
      run: ./scripts/ci/ci_setup.sh
    - continue-on-error: true
      name: check
      run: ./scripts/ci/ci_check_lint.sh
    - continue-on-error: true
      if: always()
      name: check-oom-due-to-lint-issue
      run: 'echo "repo ls:"

        ls -al

        echo "logs ls:"

        ls /var/log

        grep -i ''killed process'' /var/log/messages || true

        grep -i ''killed process'' /var/log/syslog || true

        grep -i ''oom'' /var/log/messages || true

        grep -i ''oom'' /var/log/syslog || true

        grep -i ''out of memory'' /var/log/messages || true

        grep -i ''out of memory'' /var/log/syslog || true

        '
    - continue-on-error: true
      if: always()
      name: fix-fs
      run: ./scripts/ci/ci_fix_fs.sh
    - continue-on-error: true
      if: always()
      uses: ./.github/actions/collect-reports
      with:
        file_pattern: lint-results-*.html
        output_folder: collected_reports/lint
    - continue-on-error: true
      if: always()
      uses: ./.github/actions/collect-reports
      with:
        file_pattern: java_*.hprof
        output_folder: oom_dumps
    - continue-on-error: true
      if: always()
      uses: actions/upload-artifact@v4.3.2
      with:
        name: linters-reports
        path: collected_reports
    timeout-minutes: 20
  merge-to-main:
    container: ghcr.io/menny/android_base:1.20.0
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-branch-')
    needs:
    - all-green-requirement
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 0
        ref: main
        token: ${{ secrets.BOT_MASTER_RW_GITHUB_TOKEN }}
    - continue-on-error: true
      name: create-merge-commit
      run: ./scripts/ci/ci_merge_to_default_branch.sh ${{ github.ref }}
    - continue-on-error: true
      name: Create pull request
      uses: peter-evans/create-pull-request@v6.0.4
      with:
        author: Polyglot <ask@evendanan.net>
        base: main
        body: Generated from commit ${{ github.sha }} on ${{ github.ref }}.
        branch: bot-pr/merge-to-default-branch-from-${{ github.ref_name }}
        commit-message: Merge to default branch from ${{ github.ref_name }}.
        committer: Polyglot <ask@evendanan.net>
        delete-branch: true
        team-reviewers: maintainers
        title: Automated Merge to default branch from ${{ github.ref_name }}.
        token: ${{ secrets.BOT_MASTER_RW_GITHUB_TOKEN }}
  static-checks:
    container: ghcr.io/menny/android_ndk:1.20.0
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 2
    - continue-on-error: true
      uses: actions/cache@v4.0.2
      with:
        key: global-v9-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{
          hashFiles('**/*.gradle') }}
        path: .github_cache_gradle/
        restore-keys: 'global-v9

          '
    - continue-on-error: true
      name: setup
      run: ./scripts/ci/ci_setup.sh
    - continue-on-error: true
      name: check
      run: ./scripts/ci/ci_check.sh
    - continue-on-error: true
      name: check-all-yamls
      run: ./scripts/ci/ci_check_yamls.sh
    - continue-on-error: true
      name: verify-version-classes-greps
      run: ./scripts/ci/third-party-update/verify-third-party-update-greps.sh
    - continue-on-error: true
      if: always()
      name: fix-fs
      run: ./scripts/ci/ci_fix_fs.sh
    - continue-on-error: true
      if: always()
      uses: ./.github/actions/collect-reports
      with:
        file_pattern: checkstyle*.html
        output_folder: collected_reports/checkstyle
    - continue-on-error: true
      if: always()
      uses: actions/upload-artifact@v4.3.2
      with:
        name: checks-reports
        path: collected_reports
    timeout-minutes: 15
  tests:
    container: ghcr.io/menny/android_ndk:1.20.0
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 2
    - continue-on-error: true
      uses: actions/cache@v4.0.2
      with:
        key: tests-v9-${{ matrix.actual_shard }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties')
          }}-${{ hashFiles('**/*.gradle') }}
        path: .github_cache_gradle/
        restore-keys: 'tests-v9-${{ matrix.actual_shard }}

          global-v9

          '
    - continue-on-error: true
      name: setup
      run: ./scripts/ci/ci_setup.sh
    - continue-on-error: true
      name: setup robolectric
      run: ./scripts/download_robolectric_jars_to_machine.sh
    - continue-on-error: true
      name: generate projects list for sharding
      run: ./gradlew projects | grep Project > /tmp/projects.lst
    - continue-on-error: true
      name: shard
      run: python3 scripts/modules_sharder.py /tmp/projects.lst "$PWD" ${{ matrix.actual_shard
        || matrix.shard_variant }} ${{ matrix.tasks }} /tmp/gradle.tasks.lst
    - continue-on-error: true
      name: tests
      run: ./gradlew $(cat /tmp/gradle.tasks.lst) ${{ matrix.extra_args }}
    - continue-on-error: true
      uses: ./.github/actions/codecov
    - continue-on-error: true
      if: always()
      name: fix-fs
      run: ./scripts/ci/ci_fix_fs.sh
    - continue-on-error: true
      if: always()
      uses: ./.github/actions/collect-reports
      with:
        file_pattern: '**/build/reports/tests/**'
    - continue-on-error: true
      if: always()
      uses: actions/upload-artifact@v4.3.2
      with:
        name: tests-${{ matrix.shard_variant }}
        path: collected_reports
    - continue-on-error: true
      if: always()
      uses: actions/upload-artifact@v4.3.2
      with:
        name: tests-build-logging-${{ matrix.shard_variant }}
        path: build/build-logging
    strategy:
      matrix:
        include:
        - extra_args: ''
          tasks: testDebugUnitTest,testDebugUnitTestCoverage
        - actual_shard: app
          extra_args: --tests="*AllSdkTest*" ime:app:testDebugUnitTestCoverage
          shard_variant: app_all_sdks
          tasks: testDebugUnitTest
        - extra_args: -PexcludeTestClasses="**/*AllSdkTest*" ime:app:testDebugUnitTestCoverage
          shard_variant: app
          tasks: testDebugUnitTest
        - actual_shard: app
          extra_args: --tests="*LoadedKeyboardsVerificationTest*" ime:app:testAllAddOnsUnitTestCoverage
          shard_variant: app_all_addons
          tasks: testAllAddOnsUnitTest
        shard_variant:
        - addons_0
        - addons_1
        - addons_2
        - app
        - app_all_sdks
        - app_all_addons
        - non_app
    timeout-minutes: 15
name: checks
on:
  repository_dispatch:
    types: trigger-ga___checks.yml
